user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;
    # Use Docker-internal DNS so names like 'app' resolve at request time
    resolver 127.0.0.11 ipv6=off;

    # HTTP server: ACME validation + redirect to HTTPS
    server {
        listen 80;
        server_name gigaisystem.com www.gigaisystem.com;

        # ACME (Let's Encrypt) HTTP-01 validation
        location /.well-known/acme-challenge/ {
            root /usr/share/nginx/html;
            default_type text/plain;
            try_files $uri =404;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server: API reverse proxy + SPA static
    server {
        listen 443 ssl;
        http2 on;
        server_name gigaisystem.com www.gigaisystem.com;

        # Frontend service name on the shared Docker network
        set $frontend app;
        ssl_certificate     /etc/letsencrypt/live/gigaisystem.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/gigaisystem.com/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Backend reverse proxy to Django web (admin + all API apps)
        location ~ ^/(admin|accounts|ai|social|keywords|prompts|tasks|stats|api)/ {
            proxy_pass http://web:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Front-end static (official site) and Django static files
        root /opt/home;
        index index.html;

        # Django static files (mounted to /opt/staticfiles) – use ^~ to avoid regex locations overriding
        location ^~ /static/ {
            alias /opt/staticfiles/;
            try_files $uri =404;
            expires 30d;
            access_log off;
        }

        # Meta/平台验证文件（精确匹配，直接由 Nginx 返回，避免走反代）
        location = /dlw3g9omnw2135g5dm36mexovo123p.html {
            # 文件位于上述 root (/opt/home) 下
            root /opt/home;
            default_type text/html;
            add_header Cache-Control "no-cache";
            try_files $uri =404;
        }

        # Serve built frontend statically under /app/
        location ^~ /app/ {
            alias /opt/app/;
            try_files $uri $uri/ /app/index.html;
            expires 7d;
        }

        # Serve favicon explicitly to avoid SPA fallback loop
        location = /favicon.ico {
            root /opt/home;
            access_log off;
            log_not_found off;
            try_files $uri =204;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
        }

        # Explicitly serve SPA entry to break any redirect cycles
        location = /index.html {
            root /opt/home;
            try_files $uri =404;
            add_header Cache-Control "no-cache";
        }

        # Serve official static site at /
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}
