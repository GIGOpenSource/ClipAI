"""
Django settings for ClipAI project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#$#^ij10#p)s!cwf*c^@brw(y6c1p00il!nq0(6@@k9%_g61j!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'rest_framework',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'corsheaders',
    'rest_framework_simplejwt.token_blacklist',
    'ai',
    'social',
    'keywords',
    'prompts',
    'tasks',
    'stats',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'BLACKLIST_AFTER_ROTATION': True,
    'ROTATE_REFRESH_TOKENS': True,
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'ClipAI 账户管理 API',
    'DESCRIPTION': (
        '后端接口文档（中文）\n\n'
        '校验规则摘要：\n'
        '- 任务调度：\n'
        '  - minutely/hourly: 需 interval_value>0\n'
        '  - daily/weekly/monthly: 需 time_of_day\n'
        '  - weekly: weekday_mask ⊆ {mon..sun} 且非空\n'
        '  - monthly: day_of_month ∈ [-31,-1]∪[1,31]\n'
        '  - cron: cron_expr 为 5~6 段\n'
        '- 社交配置：twitter 需 client_id/client_secret；facebook/instagram 需 app_id/app_secret\n'
        '- AI 配置：openai/deepseek 需 api_key 与 model；deepseek 未填 base_url 默认 https://api.deepseek.com\n'
        '- 提示词：enabled=true 时 content 必填；variables 必须为字符串数组\n'
        '- 关键词：match_mode ∈ {any,all,regex}；包含/排除关键词必须为字符串数组\n'
        '\n权限与多租户：\n'
        '- 所有接口默认仅管理员可访问；对象级权限采用 IsOwnerOrAdmin（管理员或对象 owner）\n'
        '- 列表接口默认过滤到当前用户 owner；管理员可传 owner_id 或在统计中使用 aggregate=all\n'
        '\n速率限制（Rate Limit）：\n'
        '- 系统内置本地限速保护，命中后任务将被跳过并应用退避（默认 300 秒）。\n'
        '- 当调用 Twitter 等平台 API 时，会尝试解析平台限速响应头：x-rate-limit-limit/x-rate-limit-remaining/x-rate-limit-reset。\n'
        '- 在任务运行结果 TaskRun.response_dump 中新增：\n'
        '  - rate_limit_headers：平台返回的限速头部（字典）。\n'
        '  - rate_limit_warning：是否接近阈值（示例：remaining<=3）。\n'
        '  - rate_limit_note：限速提示说明。\n'
    ),
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'accounts.middleware.DisableCSRFMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ClipAI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ClipAI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

POSTGRES_HOST = os.getenv('POSTGRES_HOST') or os.getenv('DB_HOST')
if POSTGRES_HOST:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB', 'clipai'),
            'USER': os.getenv('POSTGRES_USER', 'clipai'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'clipai'),
            'HOST': POSTGRES_HOST,
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Collectstatic output (served by Nginx)
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS: allow all origins (development convenience)
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Celery (defaults; override via env)
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULE = {
    'check-scheduled-tasks-every-60s': {
        'task': 'tasks.tasks.check_scheduled_tasks',
        'schedule': 60.0,
    },
    'refresh-expiring-tokens-every-5m': {
        'task': 'social.tasks.refresh_expiring_tokens',
        'schedule': 300.0,
        'args': (15,)
    },
    'check-social-accounts-health-every-1h': {
        'task': 'social.tasks.check_social_accounts_health',
        'schedule': 3600.0,
    },
}

# Encryption key for sensitive fields (set in env for production)
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')

# Toggle webhooks (default off)
WEBHOOKS_ENABLED = (os.getenv('WEBHOOKS_ENABLED', 'false').lower() == 'true')

# 当无平台账号但已配置 AI 时，是否启用“AI+Faker 回退”
AI_FAKE_FALLBACK_ENABLED = (os.getenv('AI_FAKE_FALLBACK_ENABLED', 'false').lower() == 'false')

# Rate limit enforcement (no DB changes)
RATE_LIMIT_ENFORCE_SKIP = (os.getenv('RATE_LIMIT_ENFORCE_SKIP', 'true').lower() == 'true')
RATE_LIMIT_DEFAULT_BACKOFF_SECONDS = int(os.getenv('RATE_LIMIT_DEFAULT_BACKOFF_SECONDS', '300'))
